<div class="col-lg-12 col-md-12 col-sm-12">
    <h4>连接MongoDB遇到的问题</h4>
    <pre>   E:\software\MongoDB&gt;mongo 127.0.0.1:27017/blog
    MongoDB shell version v3.4.6
    connecting to: mongodb://127.0.0.1:27017/blog
    MongoDB server version: 3.4.6
    Server has startup warnings:
    2018-09-02T11:09:12.537+0800 I CONTROL  [initandlisten]
    2018-09-02T11:09:12.537+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
    2018-09-02T11:09:12.537+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
    2018-09-02T11:09:12.537+0800 I CONTROL  [initandlisten]
</pre> 
    <h5>mongodb用户跟着库走的，有区别于其它的不同的数据库，如mysql、sqlserver等 </h5>
    <pre>
    解决方式:配置 
    ① auth=true mongodb安装目录bin下有自己添加的mongo.config 方案1)配置文件 、方案2) yaml 
                 ****************重新 install 的时候 清空dbpath、logpath目录下的所有文件 *************************
                     方案1)
                        bin 创建mongod.config
                        dbpath=E:\software\MongoDB\Server\data\db
                        logpath=E:\software\MongoDB\Server\data\log\mongod.log
                        port=27017
                        bind_ip = 127.0.0.1 
                        auth=true
                        #fork=true
                        logappend=true
                        #keyFile=/usr/tools/mongodb/keyfile
                        #master=true
        
                        mongod --config "E:\software\MongoDB\Server\bin\mongo.config" --install
                        net start MongoDB
                    方案2) 推荐
                        systemLog:
                           destination: file
                           path: E:\software\MongoDB\Server\data\log\mongod.log
                           logAppend: true
                        storage:
                           journal:
                              enabled: true
                              dbPath: E:\software\MongoDB\Server\data\db
                        net:
                           bindIp: 127.0.0.1
                           port: 27017
                        security: 
                           authorization: "enabled"
                      *******************************************************************************
                    mongod -f "E:\software\MongoDB\Server\data\config\mongod.cfg"  --install
                    mongod --config "E:\software\MongoDB\Server\data\config\mongod.cfg" --serviceName "mongodb" --serviceDisplayName "mongodb" --install
                    
                    *******************************************************************************
    ② 安装服务时添加  --auth  开启认证
</pre>
    <pre>
    ①
    停止mongodb服务 &gt;  net stop mongodb 
    删除mongodb服务 &gt;  sc delete mongodb 
    重新安装mongodb服务A: &gt; mongod --auth --bind_ip 127.0.0.1 --logpath "E:\software\MongoDB\Server\data\log\mongodb.log" 
                                    --logappend --dbpath "E:\software\MongoDB\Server\data\db" --port 27017 
                                    --serviceName "mongodb" --serviceDisplayName "mongodb" --install 
    启动mongodb服务 &gt;  net start mongodb
    创建用户名、密码、设置角色和认证 
            &gt;   use admin
            &gt;   db.createUser(
            {
            user: "admin", //用户名
            pwd: "P@ssw0rd", //密码
            roles: [ { role: "userAdminAnyDatabase", db: "admin" } ] //权限
            }
            );
        @*  db.createUser( { user: "admin",  pwd: "admin", roles: [ { role: "userAdminAnyDatabase", db: "admin" } ] } ); 
         db.auth( "admin","admin"); 
         db.createUser( { user: "robot",  pwd: "robot", roles: [ { role: "readWrite", db: "movie" } ] } );   *@
            &gt;   db.auth("admin","P@ssw0rd")
    退出后登录  mongo --port 27017 -u "admin" -p "P@ssw0rd" --authenticationDatabase "admin"
    完成 
</pre>
    <pre>
    ②
    停止mongodb服务  &gt;  net stop mongodb  
    删除mongodb服务  &gt;  sc delete mongodb 
    重新安装mongodb服务 A: &gt; mongod --auth --bind_ip 127.0.0.1 --logpath "E:\software\MongoDB\Server\data\log\mongodb.log"
                                       --logappend --dbpath "E:\software\MongoDB\Server\data\db" --port 27017 
                                       --serviceName "mongodb" --serviceDisplayName "mongodb" --install
    启动mongodb服务 &gt;  net start mongodb     
    创建用户名、密码、设置角色和认证 
    
            &gt;   use admin
            &gt;   db.createUser(
            {
            user: "admin", //用户名
            pwd: "P@ssw0rd", //密码
            roles: [ { role: "userAdminAnyDatabase", db: "admin" } ] //权限
            }
            );
            &gt;   db.auth("admin","P@ssw0rd")
     
    退出后登录（默认test库 或指定）   &gt;    mongo --port 27017 -u "admin" -p "P@ssw0rd" --authenticationDatabase "admin"
    推荐指定admin库 用户已存在        &gt;    mongo --port 27017 -u "admin" -p "P@ssw0rd" --authenticationDatabase "admin" admin
    完成 
</pre>
    <h5>MongoDB数据库角色</h5>
    <pre>
    role指角色，管理控制数据库的权限，第一个用户最好是root用户，可以执行任何操作，
    初始化最好创建root权限的用户，当开启auth模式，任何操作都需要权限才能执行。也千万不能直接auth启动后台运行模式，否则你就没有权限用户去关闭数据库。
    •Read：允许用户读取指定数据库
    •readWrite：允许用户读写指定数据库
    •dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile
    •userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户
    •clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。
    •readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限
    •readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限
    •userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限
    •dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。
    •root：只在admin数据库中可用。超级账号，超级权限 
</pre>
    <pre>
    数据库用户角色（Database User Roles）：

    read：授予User只读数据的权限
    readWrite：授予User读写数据的权限
    数据库管理角色（Database Administration Roles）：

    dbAdmin：在当前dB中执行管理操作
    dbOwner：在当前DB中执行任意操作
    userAdmin：在当前DB中管理User
    备份和还原角色（Backup and Restoration Roles）：

    backup
    restore
    跨库角色（All-Database Roles）：

    readAnyDatabase：授予在所有数据库上读取数据的权限
    readWriteAnyDatabase：授予在所有数据库上读写数据的权限
    userAdminAnyDatabase：授予在所有数据库上管理User的权限
    dbAdminAnyDatabase：授予管理所有数据库的权限
    集群管理角色（Cluster Administration Roles）：

    clusterAdmin：授予管理集群的最高权限
    clusterManager：授予管理和监控集群的权限，A user with this role can access the config and local databases, which are used in sharding and replication, respectively.
    clusterMonitor：授予监控集群的权限，对监控工具具有readonly的权限
    hostManager：管理Server
</pre>

</div>

<div class="col-lg-12 col-md-12 col-sm-12">
    <h5><a href="https://blog.csdn.net/eagle89/article/details/80595060">参考MongoDB认证详解</a></h5>
    <h5><a href="https://www.cnblogs.com/yangliheng/p/6069763.html">参考MongoDB命令参数</a></h5>
    <h5><a href="https://www.cnblogs.com/phpandmysql/p/7763394.html">mongodb yaml 配置方式</a></h5>
    <h5><a href="https://blog.csdn.net/hkyw000/article/details/54411230">mongodb yaml 配置方式</a></h5> 
    <h5><a href="http://blog.51cto.com/noodle/1748132">mongodb yaml 配置方式</a></h5>
    <h6><a href="http://www.yaml.org/"> yaml </a></h6>
</div>


<div class="col-lg-12 col-md-12 col-sm-12">
    <h5>mongodb的使用</h5>
    <h5>mongodb上用户认证、端口权限。</h5>
    <pre>
    查看当前库的所有用户
    use admin
    db.getUsers()
    查看当前库的指定用户
    db.getUser("robot")
    使用admin用户修改普通用户密码
    use admin
    db.changeUserPassword("admin", "SOh3TbYhx8ypJPxmt1oOfL")
    添加角色
    use admin
    db.grantRolesToUser(  "robot",  [    { role: "read",db:"admin"}  ] )
    删除指定角色
    use admin
    db.revokeRolesFromUser("robot",[    { role: "read",db:"admin"}  ] )
    删除库下面用户
    use admin
    db.dropUser("admin");
    删除库下面所有用户,包括正在登陆的用户 慎用 重启服务
    use admin
    db.dropAllUsers()
</pre>
</div>
<div class="col-lg-12 col-md-12 col-sm-12">
    <h5>前面已经创建了 admin用户   </h5>
    <h5>登录  mongo admin --port 27017 -u "admin" -p "P@ssw0rd" --authenticationDatabase "admin"  </h5>
<h5>然后，切换到其他库，创建用户密码角色 认证 测试</h5>
<pre>
    &gt;     use demo
    &gt;     db.createUser({user: "robot",pwd: "P@ssw0rd",roles: [ { role: "dbOwner", db: "demo" }] });
    &gt;     db.auth("robot","P@ssw0rd")
    &gt;     show dbs
    &gt;     use movie
    &gt;     db.createUser({user: "robot",pwd: "P@ssw0rd",roles: [ { role: "dbOwner", db: "movie" }] });
    &gt;     db.auth("robot","P@ssw0rd")
    &gt;     show dbs
        用户登录  操作
    &gt;     mongo demo -u "robot" -p  "P@ssw0rd" --authenticationDatabase "demo"
    &gt;     mongo movie -u "robot" -p "P@ssw0rd" --authenticationDatabase "movie"
    &gt;     use demo
    &gt;     db.robot.insert({"a","a"})
    &gt;     use movie
    &gt;     db.robot.insert({"a","a"})
    
</pre>
 
</div>
<div class="col-lg-12 col-md-12 col-sm-12">
    <h5><a href="https://blog.csdn.net/eagle89/article/details/80595060">参考MongoDB认证详解</a></h5>
</div>

