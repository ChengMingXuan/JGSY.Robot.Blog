<div class="col-lg-12 col-md-12 col-sm-12">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <h4>nodejs Nginx express jade </h4>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12">
        <h5>部署结构</h5>
        <img src="~/nodejs/20180916/1.png" />
        <h5>ssh无密码登录配置</h5>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12 hide">
        <img src="~/nodejs/20180916/s1.png" />
        <img src="~/nodejs/20180916/s2.png" />
        <img src="~/nodejs/20180916/s3.png" />
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12">
        <h4>Ubuntu Server 16.04.1 LTS 64位</h4>
        <h5>1、安装SSH</h5>
        <pre>
    首先更新源 
        sudo apt-get update
    安装服务端 openssh(默认已安装)   未安装时，会有输入提示：输入大写的 Y
        sudo apt-get install openssh-server 
    安装客户端 
        sudo apt-get install openssh-client
            我这里是windows 使用git,如果是两台linux系统双向登录 都得安装 openssh-client和openssh-server
    
    查看ssh服务是否启动
        sudo ps -e |grep ssh
    开启ssh服务
        sudo service ssh start
    ssh localhost  本地
    测试登录密码成功后，服务器基础环境安装成功

     更改相关配置
     gedit  /etc/ssh/sshd_config  或者 vi /etc/ssh/sshd_config
               打开配置文件/etc/ssh/sshd_config  将PermitRootLogin，RSAAuthentication，PubkeyAuthentication的设置打开。
     gedit编辑器
         安装 gedit
        sudo apt-get update
        sudo apt-get install gedit-gmate
        sudo apt-get install gedit-plugins
        sudo apt-get remove gedit
        sudo apt-get install gedit
    

    启动ssh的服务：
    systemctl start sshd.service
    设置开机自动启动ssh服务
    systemctl enable sshd.service

    查看状态：
    systemctl status sshd.service

    启动服务：
    systemctl start sshd.service

    重启服务：
    systemctl restart sshd.service

    开机自启：
    systemctl enable sshd.service
 
</pre>
        <h5>2、客户端、服务端配置生成ssh key</h5>
        <pre>
      配置生成ssh key（最好不要用root用户生成）
        ssh-keygen -t rsa -b 4096 -C "XXX@162.com" 回车默认 或者ssh-keygen -t rsa -P "" 、ssh-keygen 等
       @*ssh-keygen -t rsa -b 4096 -C "18810114757@163.com"*@

        eval "$(ssh-agent -s)"  开启代理 
        ssh-add ~/.ssh/id_rsa   把key加入到代理中
        1、ssh-keygen：
        SSH 为 Secure Shell 的缩写，SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，
            专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。
        从客户端来看，SSH提供两种级别的安全验证：
                第一种级别（基于口令的安全验证）：只要你知道自己帐号和口令，就可以登录到远程主机。
                        所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想连接的服务器。
                        可能会有别的服务器在冒充真正的服务器，也就是受到“中间人”这种方式的攻击。
                第二种级别（基于密匙的安全验证）ssh-keygen：需要依靠密匙，你必须为自己创建一对密匙，
                        并把公用密匙放在需要访问的服务器上。如果你要连接到SSH服务器上，客户端软件就会向服务器发出请求，
                        请求用你的密匙进行安全验证。服务器收到请求之后，先在该服务器上你的主目录下寻找你的公用密匙，
                        然后把它和你发送过来的公用密匙进行比较。如果两个密匙一致，服务器就用公用密匙加密“质询”
                        （challenge）并把它发送给客户端软件。客户端软件收到“质询”之后就可以用你的私人密匙解密再把它发送给服务器。
                        用这种方式，你必须知道自己密匙的口令。但是，与第一种级别相比，第二种级别不需要在网络上传送口令。
                         第二种级别不仅加密所有传送的数据，而且“中间人”这种攻击方式也是不可能的（因为他没有你的私人密匙）。
                        但是整个登录的过程可能需要10秒 。
                ssh-keygen有很多的参数，比如这里的-t -b -C都是他的一些参数。

        2、-t rsa：t是type的缩写
        -t即指定密钥的类型，密钥的类型有两种，一种是RSA，一种是DSA：
                RSA：RSA加密算法是一种非对称加密算法，是由三个麻省理工的牛人弄出来的，RSA是他们三个人姓的开头首字母组合。
                DSA：Digital Signature Algorithm (DSA)是Schnorr和ElGamal签名算法的变种。
        为了让两个linux机器之间使用ssh不需要用户名和密码。所以采用了数字签名RSA或者DSA来完成这个操作。
            ssh-keygen默认使用rsa密钥，所以不加-t rsa也行，如果你想生成dsa密钥，就需要加参数-t dsa。

        3、-b 4096：b是bit的缩写
        -b 指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。命令中的4096指的是RSA密钥长度为4096位。
        DSA密钥必须恰好是1024位(FIPS 186-2 标准的要求)。

        4、-C "邮箱"：C是comment的缩写
        -C表示要提供一个新注释，用于识别这个密钥，所以“”里面不一定非要填邮箱，可以是任何内容，邮箱仅仅是识别用的key
        总结：当你创建ssh的时候：-t 表示密钥的类型 ，-b表示密钥的长度，-C 用于识别这个密钥的注释 ，
              这个注释你可以输入任何内容，很多网站和软件用这个注释作为密钥的名字
    </pre>
        <h5>3、创建普通用户，赋予相应的操作权限 sudo 组</h5>
        <PRE>
         ubuntu默认没有开启root用户
        一、
        其实这没有多大必要，因为当你需要 root 的权限时，使用 sudo 便可以了。
        如果你实在需要在 Ubuntu 中启用 root 帐号的话，那么不妨执行下面的操作：

          1.重新设置 root 的密码：
          $sudo passwd root  #按照提示输入两次新的密码，并加以确认。
          
          2.启用root用户登录：
          $sudo vi /etc/X11/gdm/gdm.conf #打开gnome的配置文件,在末行模式中输入：AllowRoot回车，
            找到AllowRoot＝false ,把false改为true，保存后退出。
          之后，重启系统时，就可以用 root 登录了。如果你想要禁用 root 帐号，则执行下列命令：

          $sudo passwd -l root
 
        二、
        Ubuntu 中的 root 帐号默认是被禁用了的。在这种情况之下，如果你想要使用 root 的权限来干些事情，就需要 sudo 指令。对某些朋友来说，他们可能需要激活 Ubuntu 中的 root 帐号。

        在 Ubuntu 中激活 root 帐号的过程如下：

          1. 在终端执行 sudo passwd root 指令后，系统将会提示你设置一个新的 root 帐号密码。
          2. 点击 System -> Preferences -> Login Window 菜单，并切换到 Security 选项页，然后选中其下的“Allow local system administrator login”选项。

        执行上述两步后，你便可以使用 root 帐号登录 Ubuntu 系统了。
        如果要再次禁用 root 帐号，那么可以执行 sudo passwd -l root。 
        三、
        如果一直想一直用root也可以"sudo -s"。
</PRE>
        <pre> 
        添加用户 sudo adduser robot
        执行结果成功
        ubuntu@VM-0-10-ubuntu:~$ sudo adduser robot
        Adding user `robot' ...
        Adding new group `robot' (1000) ...
        Adding new user `robot' (1000) with group `robot' ...
        Creating home directory `/home/robot' ...
        Copying files from `/etc/skel' ...
        Enter new UNIX password:
        Retype new UNIX password:
        passwd: password updated successfully
        Changing the user information for robot
        Enter the new value, or press ENTER for the default
                Full Name []: robot
                Room Number []: robot
                Work Phone []:
                Home Phone []:
                Other []: robot
        Is the information correct? [Y/n] Y
        ubuntu@VM-0-10-ubuntu:~$
        赋予权限 sudo gpasswd -a robot sudo
        ubuntu@VM-0-10-ubuntu:~$ sudo gpasswd -a robot sudo
        Adding user robot to group sudo
        ubuntu@VM-0-10-ubuntu:~$
        重启ssh
        sudo service ssh restart
            

        最终整理
        sudo visudo 进入编辑
           robot 属于 sudo 用户组 
              addUser  robot  输入密码 这里输入的信息最好记录一下XX.txt
              gpasswd -a robot sudo  添加到sudo 组
                
              sudo visudo   更改内容如下 规则对用户robot生效
                        robot ALL=(ALL:ALL) ALL  
                                1 all、 对所有sudo生效
                                2 all、 robot可以以任何用户执行命令
                                3 all、 robot可以以任何组执行命令
                                4 all、 robot使用所有组
                               ctrl+s 回车 Y 
            禁用掉root登录和无密码登录 
            PermitRootLogin no
            PasswordAuthentication no
            PermitEmptyPasswords no

            sudo ps -e |grep ssh 查看服务是否启动
            sudo service ssh start" 服务就会启动
</pre>
        <h6>4、赋予操作权限</h6>
        <pre>
     这里没有赋予authorized_keys最大权限 777 权限如下 以便当前用户有权限操作 赋予 authorized_keys 文件权限 
        chmod -R 700 .ssh &&   chmod -R 600 .ssh/authorized_keys  

     将公钥追加到 authorized_keys 文件中 cat .ssh/id_rsa.pub >> .ssh/authorized_keys
     ssh localhost  第一次需要输入 yes 不用输入密码即可在当前重新登录，即 本地无密码登录测试    
        </pre>

        <h5>5、配置客户端远程登录服务器</h5>
        <a href="http://blog.sina.com.cn/s/blog_541a3cf10101epzf.html">ssh-copy-id使用非默认22端口时 </a>
        <pre> 
      客户端执行以下命令(默认端口)
        ssh-copy-id -i C:/Users/jack/.ssh/id_rsa.pub robot@119.29.104.251
        (非默认端口)
        ssh-copy-id -i  C:/Users/jack/.ssh/id_rsa.pub -p 22222 robot@119.29.104.251

        执行结果成功
            $ ssh-copy-id -i C:/Users/jack/.ssh/id_rsa.pub robot@119.29.104.251
            /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "C:/Users/jack/.ssh/id_rsa.pub"
            The authenticity of host '119.29.104.251 (119.29.104.251)' can't be established.
            ECDSA key fingerprint is SHA256:VV7UrNsO5c9voIJJNoHLY/jciaq0YA9VUfpGJMoc6/g.
            Are you sure you want to continue connecting (yes/no)? yes  这里手动输入
            /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
            /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
            robot@119.29.104.251's password:

            Number of key(s) added: 1

            Now try logging into the machine, with:   "ssh 'robot@119.29.104.251'"
            and check to make sure that only the key(s) you wanted were added.


        登录
         ssh robot@119.29.104.251  无密码登录
         执行结果成功
            $ ssh robot@119.29.104.251
            Welcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-130-generic x86_64)

             * Documentation:  https://help.ubuntu.com
             * Management:     https://landscape.canonical.com
             * Support:        https://ubuntu.com/advantage
            New release '18.04.1 LTS' available.
            Run 'do-release-upgrade' to upgrade to it.


            Last login: Thu Sep 20 14:38:39 2018 from 222.130.143.240
            robot@VM-0-10-ubuntu:~$
        
        
        </pre>

        <h5>6、ssh 默认22端口登录不安全 </h5>
        <pre> 
        sudo vi /etc/ssh/sshd_config
        变更
        port 22222
        UseDNS no
        最下面 添加 AllowUsers robot
         改了 port=22 --> port=22222 
         sudo service ssh restart
         登录 ssh  robot@119.29.104.251 变为  ssh -p 22222  robot@119.29.104.251
        </pre>
        <h5>7、配置iptables和Fail2Ban增强安全防护 </h5>
        <pre>
    1、ubuntu系统
        sudo apt-get update && sudo apt-get upgrade
            update是下载源里面的metadata的. 包括这个源有什么包, 每个包什么版本之类的.
            upgrade是根据update命令下载的metadata决定要更新什么包(同时获取每个包的位置).
        iptables -F
        sudo iptables -F 清楚默认配置
        sudo vi /etc/iptables.up.rules  新建文件
        *filter
         #allow all connections
        -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        # allow out traffic
        -A OUTPUT -j ACCEPT
         #allow http https
        -A INPUT -p tcp --dport 443 -j ACCEPT

        -A INPUT -p tcp --dport 80 -j ACCEPT

        -A INPUT -p tcp --dport 8080 -j ACCEPT
         #allow ssh port login
        -A INPUT -p tcp -m state --state NEW --dport 22222 -j ACCEPT
        #allow ssh port login
        -A INPUT -p tcp -m state --state NEW --dport 22 -j ACCEPT
        #ping
        -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT
        # log denied calls
        -A INPUT -m limit --limit  5/min -j LOG --log-prefix "iptables denied:" --log-level 7
        # drop incoming sensitive connections
        -A INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --set

        -A INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --update --seconds 60 --hitcount 150 -j DROP

        -A INPUT -j REJECT

        -A FORWARD -j REJECT
        COMMIT

    保存
    执行防火墙规则
    sudo iptables-restore < /etc/iptables.up.rules 


    sudo ufw status  查看 status : inactive
    sudo ufw enable 激活防火墙配置

    留用备用方案
    sudo vi /etc/network/if-up.d/iptables
    #!/bin/sh
    iptables-restore /etc/iptables.up.rules
    保存
    权限
    sudo chmod +x /etc/network/if-up.d/iptables

    安装Fail2ban
    sudo apt-get install fail2ban
    Y继续
     sudo vi /etc/fail2ban/jail.conf

    bantime =3600

    destemail = 18810114757@163.com

    action = %(action_mw)s

    maxretry =6
    保存  

    sudo service fail2ban status

    sudo service fail2ban start
    sudo service fail2ban stop

</pre>
        <h5> <a href="https://blog.csdn.net/wenyun_kang/article/details/77413714">Ubuntu ssh免密参考</a></h5>
        <h5><a href="https://blog.csdn.net/u010458114/article/details/70161486">Ubuntu ssh免密参考</a></h5>
        <h5><a href="https://blog.csdn.net/piaocoder/article/details/54707533">iptables配置博客</a> </h5>

        <h4>8、ubuntu 安装nodejs环境 </h4>
        <pre>
    nodejs部署  ubuntu
    更新 
    sudo apt-get update  
    安装所需软件工具
    sudo apt-get install vim openssl build-essential libssl-dev wget curl git 
    
    nvm管理nodejs版本
    https://github.com/creationix/nvm
    wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
    安装nodejs
    重新打开命令面板
    安装
    nvm install 8.0.0  、 nvm install v8.0.0
    指定版本
    nvm use 8.0.0  、 nvm use 8.0.0 
    指定版本默认就是8.0.0
    nvm alias default 8.0.0

    快速下载镜像配置  国内淘宝
    配置npm镜像 taobao
    npm --registry=https://registry.npm.taobao.org install -g npm
    增加文件监控数目
    echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p 
    安装方式变更为 cnpm 注册
    npm --registry=https://registry.npm.taobao.org install -g cnpm
    淘宝更新不及时可以同步到淘宝
    cnpm 安装不上  cnpm sync koa
    
    安装其他辅助工具 不一定用的上
    npm i pm2 webpack gulp grunt-cli -g

    服务器基本环境完成
</pre>
        <h4>9、ubuntu 安装MongoDB数据库 </h4>
        <a href="https://docs.mongodb.com/v3.0/tutorial/install-mongodb-on-ubuntu/">install-mongodb-on-ubuntu 官网API</a>

        <h4>9、ubuntu 安装Nginx </h4>

        <pre>
        1) sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4
        2) echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list
        3) sudo apt-get update
        4) 
            a:安装MongoDB的最新版本。
                sudo apt-get install -y mongodb-org
            
                @*echo "mongodb-org hold" | sudo dpkg --set-selections
                echo "mongodb-org-server hold" | sudo dpkg --set-selections
                echo "mongodb-org-shell hold" | sudo dpkg --set-selections
                echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
                echo "mongodb-org-tools hold" | sudo dpkg --set-selections*@
            b:安装MongoDB的特定版本。
                sudo apt-get install -y mongodb-org=4.0.2 mongodb-org-server=4.0.2 mongodb-org-shell=4.0.2 mongodb-org-mongos=4.0.2 mongodb-org-tools=4.0.2
                @*echo "mongodb-org hold" | sudo dpkg --set-selections
                echo "mongodb-org-server hold" | sudo dpkg --set-selections
                echo "mongodb-org-shell hold" | sudo dpkg --set-selections
                echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
                echo "mongodb-org-tools hold" | sudo dpkg --set-selections*@
            c:安装失败 没有此文件忽略
                  sudo vi /etc/apt/apt.conf
                   注释掉
                   保存退出 
        5) 安装慢的话编辑  变更
                sudo vi /etc/apt/sources.list.d/mongodb-org-4.0.list
                sudo cat /etc/apt/sources.list.d/mongodb-org-4.0.list
                由
                deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/4.0 multiverse
                变更为  我这里按照那个挺快 不用改了 
                deb [ arch=amd64 ] https://mirrors.aliyun.com/mongodb/apt/ubuntu trusty/mongodb-org/4.0 multiverse
        6) 启动mongo
            开启端口 
            sudo vi /etc/iptables.up.rules
            # mongodb connect 注意格式
            -A INPUT -s 127.0.0.1 -p tcp --destination-port 27017 -m state --state NEW,ESTABLISHED -j ACCEPT
            -A OUTPUT -d 127.0.0.1 -p tcp --source-port 27017 -m state --state ESTABLISHED -j ACCEPT
            sudo iptables-restore < /etc/iptables.up.rules
            启动
            sudo service mongod start
            sudo service mongod restart
             执行sudo service mongod start失败 
                解决失败  sudo service mongod start 命令不可用 这种启动可以sudo systemctl start mongodb
                Failed to start mongod.service: Unit not found
                sudo nano /etc/systemd/system/mongodb.service
                  添加内容       
                                [Unit]
                                Description=High-performance, schema-free document-oriented database
                                After=network.target
 
                                [Service]
                                User=mongodb
                                ExecStart=/usr/bin/mongod --quiet --config /etc/mongod.conf
 
                                [Install]
                                WantedBy=multi-user.target    
                启动   
                sudo systemctl start mongodb
                sudo systemctl status mongodb
                永久启动 
                sudo systemctl enable mongodb
            失败 解决成功
                https://stackoverflow.com/questions/48092353/failed-to-start-mongod-service-unit-mongod-service-not-found
                    Source - official instructions

                    sudo service mongod stop
                    Remove Packages

                    sudo apt-get purge mongodb-org*
                    Remove the folders

                    sudo rm -r /var/log/mongodb
                    sudo rm -r /var/lib/mongodb
                    1) sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4
                    2) echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list
                    update the list

                    sudo apt-get update
                    Install the latest package

                    sudo apt-get install -y mongodb-org
                    3 - Now it should work, please try below command

                    sudo service mongod start
                    and check the status
                    
                    sudo service mongod start
                    sudo service mongodb start
                    mongo --port 27018
            检查是否开启成功
            cat /var/log/mongodb/mongod.log
            到这里 开启成功
            
            安全升级 改变端口
            改变端口  sudo vi /etc/mongod.conf
                port 27017  --->  27018
                配置
                 sudo vi /etc/iptables.up.rules
                # mongodb connect 注意格式
                -A INPUT -s 127.0.0.1 -p tcp --destination-port 27018 -m state --state NEW,ESTABLISHED -j ACCEPT
                -A OUTPUT -d 127.0.0.1 -p tcp --source-port 27018 -m state --state ESTABLISHED -j ACCEPT
                重新载入
                sudo iptables-restore < /etc/iptables.up.rules
            启动 
            sudo systemctl start mongodb
            sudo systemctl status mongodb

            sudo service mongod stop
            sudo service mongod start
            sudo service mongod restart
            
            mongo  IP地址 [：端口]  
                    mongo  --port 27018
                    mongo  localhost:27018   
                    mongo   localhost:27018/admin
            
        7)  数据库备份、导入、导出、单表导入导出、开启安全认证等操作

            sudo mongodump -h 127.0.0.1:27017 -d indust-app -o indust-app-backup
            mongodump -u "robot" -p "robot" --authenticationDatabase "movie" -h 127.0.0.1:27017 -d movie -o ./indust-app-backup
            打包 tar zcvf indust-app.tar.gz indust-app-backup

            把本地打包好的文件 copy 到 /home/ubuntu/dbbackup/ 文件夹下
            在服务器上/home/ubuntu/创建  mkdir dbbackup
            scp -P 8081 ~Desktop/deploy-projects/indust-app.tar.gz ubuntu@119.29.104.251:/home/ubuntu/dbbackup/

            解压 

            导入mnogodb数据库
            mongorestore --host 127.0.0.1:27018 -d indust-app ./dbbackup/indust-app-backup/

            导出单表 -d 数据库  -c 表 -q可以不加 导出姓名不为空的数据
            mongoexport -d movie -c users -q '{"name": {$ne:null}}' -o ./movie-users.json

            subl users.josn 编辑文件

            本地文件夹 deploy-projects 要部署的文件存储位置

            scp -P 8081 ./user.json ubuntu@119.29.104.251:/home/ubuntu/dbbackup

            清空数据库 
            mongo --host 127.0.0.1:8081 ubuntu --eval "db.dropDatabase()"


            权限控制 添加管理员的admin 
            use admin
             1）db.createUser(
                        {
                        user: "admin", //用户名
                        pwd: "P@ssw0rd", //密码
                        roles: [ { role: "userAdminAnyDatabase", db: "admin" } ] //权限
                        }


              2）db.auth("admin","P@ssw0rd")

              use movie
              执行 1）2）  创建读写用户readWrite  备份用户read ...........

            开启数据库认证权限设置
            sudo vi /etc/mongod.conf
            取消注释
               security
                    authorization: 'enabled'
            保存
            重启服务时期生效
            sudo service mongod restart
     
                 授权必须 use admin  use movie db.auth('','')

                 测试
                 mongo 127.0.0.1:27018/movie -u robot -p robot

                 ----------已存在安全验证auth-------indust-app =movie 数据库----

            sudo mongodump -h 127.0.0.1:27017 -d indust-app -u robot -p robot -o indust-app-backup


            mongoexport -d movie -u robot -p robot -c users -q '{"name": {$ne:null}}' -o ./movie-users.json


            scp -P 8081 ./user.json ubuntu@119.29.104.251:/home/ubuntu/dbbackup


            定时备份数据库
            ls 
            mkdir tasks
            cd tasks
            vi movie.backup.sh

            #!/bin/sh
            backUpFoler=/home/robot/backup/movie
            date_now=`date +%Y_%m_%d_%H%M`
            backFileName=movie_$date_now

            cd backUpFoler
            mkdir -p $backFileName

            mongodump -h 127.0.0.1:27018 -d movie -u robot -p robot -o $backFileName

            tar zcvf $backFileName.tar.gz $backFileName

            rm -rf $backFileName

            保存
            mkdir backup
            cd /backup
            mkdir movie
            cd ..
            sudo sh ./tasks/movie.backup.sh

            启动系统定时任务
            crontab -e
            编辑器选择 2 输入

            13 00 * * * sh /home/robot/tasks/movie.backup.sh
            Ctrl+s
            shit+Y
        2) sudo apt-get update
        2) sudo apt-get update
        2) sudo apt-get update
        2) sudo apt-get update
</pre>



    </div> 
</div>