<div class="col-lg-12 col-md-12 col-sm-12">
    <h4>nodejs 入门简单爬虫案例</h4>
</div>
<div class="col-lg-12 col-md-12 col-sm-12">
    <h4>express 是 Node.js 上最流行的 Web 开发框架，下面就使用express框架实现一个入门级的小案例</h4>
</div>
<div class="col-lg-12 col-md-12 col-sm-12">
    <h5>备注：推荐 淘宝 NPM 镜像，如 cnpm install express --save</h5>
    <h5>
        1、创建一个文件夹，TheCrawler,在文件夹中添加一个app.js。通过 npm init命令创建一个package.json文件，package.json主要是用来管理依赖版本，初始化文件时会有一些设置，空文件夹entry point你默认的是（index.js），
        这里我已经提前创建了，默认就会是app.js。,其它的设置可以忽略，一路回车即可。当然也可以通过package.json修改文件来设置
    </h5>
    <h5>2、接下来安装express ,并且通过命令 --save 保存到package.json（<a title="了解 package.json 是如何起作用的" href="https://docs.npmjs.com/files/package.json" target="_blank">more</a>）文件中。执行命令：npm install express --save （临时安装命令：npm install express）</h5>
    <h6>安装 Node 模块时，如果指定了 --save 参数，那么此模块将被添加到 package.json 文件中 dependencies 依赖列表中。 然后通过 npm install 命令即可自动安装依赖列表中所列出的所有模块。</h6>
    <h5>3、简单测试一下环境</h5>
    <pre>
        var express = require('express');
        var app = express();

        app.get('/',  (req, res) =>{
          res.send('测试成功!');
        });

        var server = app.listen(3000,   () =>{
          var host = server.address().address;
          var port = server.address().port;
          console.log('服务启动成功',);
          console.log('访问服务测试路径> http://%s:%s', host=='::'?'localhost':host, port);
        });
</pre>
    <h5>4、中间件安装，使用中间件处理更便捷、灵活。</h5>
    <pre>

        body-parser ：解析body中的数据，并将其保存为Request对象的body属性。

        cookie-parser ：解析客户端cookie中的数据，并将其保存为Request对象的cookie属性

        express-session ：解析服务端生成的sessionid对应的session数据，并将其保存为Request对象的session属性

        query：这个中间件将一个查询字符串从URL转换为JS对象，并将其保存为Request对象的query属性。这个中间件在第四个版本中已经内置了无需安装。
      
         以上是简单的举例
    </pre>
    <h6>这里我们用到 body-parser 安装 cnpm i body-parser --save </h6>
    <h6>以下也是案例中用到的中间件，在这里统一说一下，后续不在赘述</h6>
    <h6><a href="https://npm.taobao.org./">淘宝 NPM 镜像 </a></h6>
    <h6><a href="https://npm.taobao.org./package/gbk">乱码处理,安装 cnpm i gbk ，转换utf-8</a></h6>
    <h6><a href="https://npm.taobao.org./package/jsdom">虚拟dom环境,安装 cnpm i jsdom 获取信息 </a></h6>
    <h6><a href="https://npm.taobao.org./package/segment">中文分词模块,安装 cnpm install segment 获取信息 </a></h6>
    <h5>5、创建文件夹static,用与存放静态资源文件 ，并在该文件加下安装jquery、bootstrap </h5>
    <h6>安装： cnpm i jquery  bootstrap --save </h6>
    <h6>在static创建一个index.html文件，简单客户端代码如下</h6>
    <pre> 
    <xmp>
    <head>
    <meta charset="UTF-8">



    <meta name="viewport" content="width=device-width, initial-scale=1.0">



    <meta http-equiv="X-UA-Compatible" content="ie=edge">



    <title>爬虫客户端测试</title>
    <link rel="stylesheet" type="text/css" href="node_modules/bootstrap/dist/css/bootstrap.css">



    <script type="text/javascript" src="node_modules/jquery/dist/jquery.js"></script>
    <script type="text/javascript" src="node_modules/bootstrap/dist//js/bootstrap.js"></script>
    <script>

        function login() {
            var name = urlpath.value;
            if (name == '') {
                return alert('路径不能为空！');
            }

            $.ajax({
                url: 'http://localhost:3000/api/cralwer/get',
                dataType: 'string',
                type: 'post',
                data: {
                    urlpath: name
                },
                success: (data) => {
                    alert(data)
                }
            });
        }


</script>
                </head>
    <body>
    <div class="container">
    <div class="row" style='padding-top: 100px'>  </div>
    <div class="row">
    <div class="col-md-12">
    <form class="form-horizontal" role="form" onsubmit="login(); ">
    <div class="form-group">
    <label for="urlpath" class="col-sm-2 control-label">路径 </label>
    <div class="col-sm-10">
    <input type="text" class="form-control" id="urlpath" placeholder="请输入路径">







                                        </div>
                                    </div>
    <div class="form-group">
    <div class="col-sm-offset-2 col-sm-10">
    <button type="submit" class="btn btn-default">登录</button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </body> 
            </xmp> 
   </pre>

    <h6>服务端代码如下 </h6>
    <pre>
var express = require('express');

var path = require('path');
var url = require('url')
var fs = require('fs')
var app = express();
//使用中间件 bodyParser
var bodyParser = require('body-parser');
var gbk = require('gbk');
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: true }));// extended: true 可解析nested json
app.use(express.static(path.join(__dirname,'static')));//指定静态文件站点资源路径


app.get('/',  (req, res) =>{ 
    // console.log(req,res) 
  res.send('测试成功!');
});
app.post('/api/cralwer/get',(req,res)=>{
  
    var urlpath=req.body.urlpath
   console.log("爬虫要爬的网站url: ",urlpath)
   requestByUrl(urlpath,(data)=>{
     console.log(gbk.toString('utf-8',data))
     console.log(data)
     fs.writeFile('1.html',data,function(err){
         if(err) throw err;
            console.log('页面抓取成功')
     });
  })
});
var server = app.listen(3000,  () =>{
  var host = server.address().address;
  var port = server.address().port;
  console.log('服务启动成功',);
  console.log('访问服务测试路径> http://%s:%s', host=='::'?'localhost':host, port);
});

/**
 * 服务端 请求
 * */
 function requestByUrl(sourceUrl,success)
 {
   /**
    * 获取路径及处理请求协议类型处理
    */
var urlObject = url.parse(sourceUrl);
var http = '';
if(urlObject.protocol == 'http:'){
  http = require('http');
 }else{
  http = require('https');
 }
console.log(urlObject)

 var req=http.request({
   "hostname":urlObject.hostname,
   "path":urlObject.path
  },res=>{
   console.log('进来了')
                if(res.statusCode == 200)
                {
                  var str = '';
                  var arr = [];
                  res.on('data',buffer=>{
                    str += buffer ;
                    arr.push(buffer)
                    // console.log(str)
                  });

                  res.on('end',()=>{
                    var b = Buffer.concat(arr);
                    success && success(b);
                  });

                } 
           });
           req.end();
           req.on('error',err=>{
             console.log('404')
           });
 }
 
</pre>
    <h5>6、到这里简单爬虫基本以实现，下面在以抓取淘宝页面数据扩展一下--》重定向之真假悟空----》递归</h5>
    <h6>主要改造一下服务端代码，响应状态码判断，代码如下</h6>
    <h6> <a href="http://tool.oschina.net/commons?type=5">HTTP状态码</a></h6>  
    <h6> <a href="https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660">百度百科之HTTP状态码</a></h6>
    <pre>
var express = require('express');

var path = require('path');
var url = require('url')
var fs = require('fs')
var app = express();
//使用中间件 bodyParser
var bodyParser = require('body-parser');
var gbk = require('gbk');
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: true }));// extended: true 可解析nested json
app.use(express.static(path.join(__dirname,'static')));//指定静态文件站点资源路径

var redirectCount=0;//

app.post('/api/cralwer/get',(req,res)=>{
    var urlpath=req.body.urlpath;
    requestByUrl(urlpath,(data)=>{
        fs.writeFile('1.html',data,function(err){
            if(err) throw err;
                console.log('页面抓取成功')
        });
    });
});
var server = app.listen(3000,  () =>{
  var host = server.address().address;
  var port = server.address().port; 
  console.log('服务启动成功 http://%s:%s', host=='::'?'localhost':host, port);
});

 function requestByUrl(sourceUrl,success)
 {
    redirectCount++;
    var urlObject = url.parse(sourceUrl);
    var http = '';
    if(urlObject.protocol == 'http:'){
    http = require('http');
    }else{
    http = require('https');
    }

    var req=http.request({"hostname":urlObject.hostname,"path":urlObject.path},res=>{
                if(res.statusCode == 200)
                {
                    var str = '';
                    var arr = [];
                    res.on('data',buffer=>{  str += buffer ;  arr.push(buffer);  });
                    res.on('end',()=>{  var b = Buffer.concat(arr);  success && success(b); });
                } else if(res.statusCode == 302 || res.statusCode == 301)
                {
                    console.log(`这是第${redirectCount}个重定向。`);
                    requestByUrl(res.headers.location,success);
                }
        });
        req.end();
        req.on('error',err=>{  console.log('404!!!!!!!!!!!!!!!!!!!!!!!!!'); });
           
 }
 
  </pre>
</div>
<div class="col-lg-12 col-md-12 col-sm-12">
    <h5>接下来玩一下，抓取小说内容，下面我们再改造一下服务端和前端界面</h5>
    <h6></h6>
</div>
<div class="col-lg-12 col-md-12 col-sm-12">
  
</div>


