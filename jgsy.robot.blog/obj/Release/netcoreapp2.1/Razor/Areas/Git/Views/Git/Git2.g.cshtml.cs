#pragma checksum "E:\2018blog\JGSY.Robot.Blog\jgsy.robot.blog\Areas\Git\Views\Git\Git2.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "932dcf5adec79c245b6bc158c979ec199178f484"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Git_Views_Git_Git2), @"mvc.1.0.view", @"/Areas/Git/Views/Git/Git2.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Areas/Git/Views/Git/Git2.cshtml", typeof(AspNetCore.Areas_Git_Views_Git_Git2))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"932dcf5adec79c245b6bc158c979ec199178f484", @"/Areas/Git/Views/Git/Git2.cshtml")]
    public class Areas_Git_Views_Git_Git2 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 3728, true);
            WriteLiteral(@"<div class=""col-lg-12 col-md-12 col-sm-12"">
    <div class=""col-lg-12 col-md-12 col-sm-12"">
        <h4>Git常用命令随笔</h4>
    </div>
    <pre>
Git名词解释


Workspace      //工作区

Index / Stage    //暂存区

Repository     //仓库区（或本地仓库）

Remote       //远程仓

 


一、新建代码库




// 在当前目录新建一个Git代码库

$ git init

// 新建一个目录，将其初始化为Git代码库

$ git init [project-name]

// 下载一个项目和它的整个代码历史

$ git clone [url]

 

二、配置

Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。



// 显示当前的Git配置

$ git config --list

 

// 编辑Git配置文件

$ git config -e [--global]

 

// 设置提交代码时的用户信息

$ git config [--global] user.name ""[name]""

$ git config [--global] user.email ""[email address]""

三、增加/删除文件



// 添加指定文件到暂存区

$ git add [file1] [file2] ...

 

// 添加指定目录到暂存区，包括子目录

$ git add [dir]

 

// 添加当前目录的所有文件到暂存区

$ git add .

 

// 添加每个变化前，都会要求确认

// 对于同一个文件的多处变化，可以实现分次提交

$ git add -p

 

// 删除工作区文件，并且将这次删除放入暂存区

$ git rm [file1] [file2] 

 

// 停止追踪指定文件，但该文件会保留在工作");
            WriteLiteral(@"区

$ git rm --cached [file]

 

// 改名文件，并且将这个改名放入暂存区

$ git mv [file-original] [file-renamed]

四、代码提交



// 提交暂存区到仓库区

$ git commit -m [message]

 

// 提交暂存区的指定文件到仓库区

$ git commit [file1] [file2] ... -m [message]

 

// 提交工作区自上次commit之后的变化，直接到仓库区

$ git commit -a

 

// 提交时显示所有diff信息

$ git commit -v

 

// 使用一次新的commit，替代上一次提交

// 如果代码没有任何新变化，则用来改写上一次commit的提交信息

$ git commit --amend -m [message]

 

// 重做上一次commit，并包括指定文件的新变化

$ git commit --amend [file1] [file2] 

五、分支



// 列出所有本地分支

$ git branch

 

// 列出所有远程分支

$ git branch -r

 

// 列出所有本地分支和远程分支

$ git branch -a

 

// 新建一个分支，但依然停留在当前分支

$ git branch [branch-name]

 

// 新建一个分支，并切换到该分支

$ git checkout -b [branch]

 

// 新建一个分支，指向指定commit

$ git branch [branch] [commit]

 

// 新建一个分支，与指定的远程分支建立追踪关系

$ git branch --track [branch] [remote-branch]

 

// 切换到指定分支，并更新工作区

$ git checkout [branch-name]

 

// 切换到上一个分支

$ git checkout -

 

// 建立追踪关系，在现");
            WriteLiteral(@"有分支与指定的远程分支之间

$ git branch --set-upstream [branch] [remote-branch]

 

// 合并指定分支到当前分支

$ git merge [branch]

 

// 选择一个commit，合并进当前分支

$ git cherry-pick [commit]

 

// 删除分支

$ git branch -d [branch-name]

 

// 删除远程分支

$ git push origin --delete [branch-name]

$ git branch -dr [remote/branch]

六、标签


$ git tag

 

// 新建一个tag在当前commit

$ git tag [tag]

 

// 新建一个tag在指定commit

$ git tag [tag] [commit]

 

// 删除本地tag

$ git tag -d [tag]

 

// 删除远程tag

$ git push origin :refs/tags/[tagName]

 

// 查看tag信息

$ git show [tag]

 

// 提交指定tag

$ git push [remote] [tag]

 

// 提交所有tag

$ git push [remote] --tags

 

// 新建一个分支，指向某个tag

$ git checkout -b [branch] [tag]

七、查看信息



// 显示有变更的文件

$ git status

 

// 显示当前分支的版本历史

$ git log

 

// 显示commit历史，以及每次commit发生变更的文件

$ git log --stat

 

// 搜索提交历史，根据关键词

$ git log -S [keyword]

 

// 显示某个commit之后的所有变动，每个commit占据一行

$ git log [tag] HEAD --pretty=format:%");
            WriteLiteral(@"s

 

// 显示某个commit之后的所有变动，其""提交说明""必须符合搜索条件

$ git log [tag] HEAD --grep feature

 

// 显示某个文件的版本历史，包括文件改名

$ git log --follow [file]

$ git whatchanged [file]

 

// 显示指定文件相关的每一次diff

$ git log -p [file]

 

// 显示过去5次提交

$ git log -5 --pretty --oneline

 

// 显示所有提交过的用户，按提交次数排序

$ git shortlog -sn

 

// 显示指定文件是什么人在什么时间修改过

$ git blame [file]

 

// 显示暂存区和工作区的差异

$ git diff

 

// 显示暂存区和上一个commit的差异

$ git diff --cached [file]

 

// 显示工作区与当前分支最新commit之间的差异

$ git diff HEAD

 

// 显示两次提交之间的差异

$ git diff [first-branch]...[second-branch]

 

// 显示今天你写了多少行代码

$ git diff --shortstat """);
            EndContext();
            BeginContext(3729, 4259, true);
            WriteLiteral(@"@{0 day ago}""

 

// 显示某次提交的元数据和内容变化

$ git show [commit]

 

// 显示某次提交发生变化的文件

$ git show --name-only [commit]

 

// 显示某次提交时，某个文件的内容

$ git show [commit]:[filename]

 

// 显示当前分支的最近几次提交

$ git reflog

八、远程同步



# 下载远程仓库的所有变动

$ git fetch [remote]

 

# 显示所有远程仓库

$ git remote -v

 

# 显示某个远程仓库的信息

$ git remote show [remote]

 

# 增加一个新的远程仓库，并命名

$ git remote add [shortname] [url]

 

# 取回远程仓库的变化，并与本地分支合并

$ git pull [remote] [branch]

 

# 上传本地指定分支到远程仓库

$ git push [remote] [branch]

 

# 强行推送当前分支到远程仓库，即使有冲突

$ git push [remote] --force

 

# 推送所有分支到远程仓库

$ git push [remote] --all

九、撤销


$ git checkout [file]

 

// 恢复某个commit的指定文件到暂存区和工作区

$ git checkout [commit] [file]

 

// 恢复暂存区的所有文件到工作区

$ git checkout .

 

// 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变

$ git reset [file]

 

// 重置暂存区与工作区，与上一次commit保持一致

$ git reset --hard

 

// 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变

$ git reset [commit]

 

// 重置当前分支的");
            WriteLiteral(@"HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致

$ git reset --hard [commit]

 

// 重置当前HEAD为指定commit，但保持暂存区和工作区不变

$ git reset --keep [commit]

 

// 新建一个commit，用来撤销指定commit

// 后者的所有变化都将被前者抵消，并且应用到当前分支

$ git revert [commit]

 

// 暂时将未提交的变化移除，稍后再移入

$ git stash

$ git stash pop

十、其他



// 生成一个可供发布的压缩包

$ git archive

 

 

查看、添加、提交、删除、找回，重置修改文件

git help <command> # 显示command的help

git show # 显示某次提交的内容 git show $id

git co -- <file> # 抛弃工作区修改

git co . # 抛弃工作区修改

git add <file> # 将工作文件修改提交到本地暂存区

git add . # 将所有修改过的工作文件提交暂存区

git rm <file> # 从版本库中删除文件

git rm <file> --cached # 从版本库中删除文件，但不删除文件

git reset <file> # 从暂存区恢复到工作文件

git reset -- . # 从暂存区恢复到工作文件

git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改

git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am ""some comments""

git ci --amend # 修改最后一次提交记录

git revert <$id> # 恢复某次提交的状态，恢复动作本身也创建次提交对象

git revert HEAD # 恢复最后一次提交的状态

查看文件diff
");
            WriteLiteral(@"
git diff <file> # 比较当前文件和暂存区文件差异 git diff

git diff <id1><id1><id2> # 比较两次提交之间的差异

git diff <branch1>..<branch2> # 在两个分支之间比较

git diff --staged # 比较暂存区和版本库差异

git diff --cached # 比较暂存区和版本库差异

git diff --stat # 仅仅比较统计信息

查看提交记录

git log git log <file> # 查看该文件每次提交记录

git log -p <file> # 查看每次详细修改内容的diff

git log -p -2 # 查看最近两次详细修改内容的diff

git log --stat #查看提交统计信息

tig

Mac上可以使用tig代替diff和log，brew install tig

Git 本地分支管理

查看、切换、创建和删除分支

git br -r # 查看远程分支

git br <new_branch> # 创建新的分支

git br -v # 查看各个分支最后提交信息

git br --merged # 查看已经被合并到当前分支的分支

git br --no-merged # 查看尚未被合并到当前分支的分支

git co <branch> # 切换到某个分支

git co -b <new_branch> # 创建新的分支，并且切换过去

git co -b <new_branch> <branch> # 基于branch创建新的new_branch

git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除

git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支

git br -d <branch> # 删除某个分支

git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)

 分支合并和rebase

git merge <branch> # 将branch分支合并到当前分支

git merge");
            WriteLiteral(@" origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交

git rebase master <branch> # 将master rebase到branch，相当于： git co <branch> && git rebase master && git co master && git merge <branch>

 Git补丁管理(方便在多台机器上开发同步时用)

git diff > ../sync.patch # 生成补丁

git apply ../sync.patch # 打补丁

git apply --check ../sync.patch #测试补丁能否成功

 Git暂存管理

git stash # 暂存

git stash list # 列所有stash

git stash apply # 恢复暂存的内容

git stash drop # 删除暂存区

Git远程分支管理

git pull # 抓取远程仓库所有分支更新并合并到本地

git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并

git fetch origin # 抓取远程仓库更新

git merge origin/master # 将远程主分支合并到本地当前分支

git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支

git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上

git push # push所有分支

git push origin master # 将本地主分支推到远程主分支

git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)

git push origin <local_branch> # 创建远程分支， origin是远程仓库名

git push origin <local_branch>:<remote_branch> # 创建远程分支

git push origin :<remote_branch> #先删除本");
            WriteLiteral("地分支(git br -d <branch>)，然后再push删除远程分支\r\n\r\nGit远程仓库管理\r\n\r\nGitHub\r\n\r\ngit remote -v # 查看远程服务器地址和仓库名称\r\n\r\ngit remote show origin # 查看远程服务器仓库状态\r\n\r\ngit remote add origin git");
            EndContext();
            BeginContext(7989, 75, true);
            WriteLiteral("@ github:robbin/robbin_site.git # 添加远程仓库地址\r\n\r\ngit remote set-url origin git");
            EndContext();
            BeginContext(8065, 198, true);
            WriteLiteral("@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库\r\n\r\n创建远程仓库\r\n\r\ngit clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库\r\n\r\nscp -r my_project.git git");
            EndContext();
            BeginContext(8264, 137, true);
            WriteLiteral("@ git.csdn.net:~ # 将纯仓库上传到服务器上\r\n\r\nmkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库\r\n\r\ngit remote add origin git");
            EndContext();
            BeginContext(8402, 355, true);
            WriteLiteral(@"@ github.com:robbin/robbin_site.git # 设置远程仓库地址

git push -u origin master # 客户端首次提交

git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track

git remote set-head origin master # 设置远程仓库的HEAD指向master分支

也可以命令设置跟踪远程库和本地库

git branch --set-upstream master origin/master

git branch --set-upstream develop origin/develop

</pre>
</div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
