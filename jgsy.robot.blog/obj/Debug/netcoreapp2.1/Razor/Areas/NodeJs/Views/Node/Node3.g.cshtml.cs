#pragma checksum "E:\2018blog\JGSY.Robot.Blog\jgsy.robot.blog\Areas\NodeJs\Views\Node\Node3.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4cebb17eca14d78b2363aa5d5fb8bc59b415ba96"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_NodeJs_Views_Node_Node3), @"mvc.1.0.view", @"/Areas/NodeJs/Views/Node/Node3.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Areas/NodeJs/Views/Node/Node3.cshtml", typeof(AspNetCore.Areas_NodeJs_Views_Node_Node3))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4cebb17eca14d78b2363aa5d5fb8bc59b415ba96", @"/Areas/NodeJs/Views/Node/Node3.cshtml")]
    public class Areas_NodeJs_Views_Node_Node3 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 1839, true);
            WriteLiteral(@"<div class=""col-lg-12 col-md-12 col-sm-12"">
    <h5>bower 和 npm 的区别详细介绍</h5>
</div>
<div class=""col-lg-12 col-md-12 col-sm-12"">
    <pre>
   摘要： 本文讲的是bower 和 npm 的区别详细介绍， 简单的说，npm是进行后端开发中，使用的模块安装工具，而bower，是前端的模块安装工具。 
   比如，在安装express，socket.io时，当然使用的是npm，那么比如bootstrap，jquery等前端框架，需要使用bower。
   随着版本的迭代npm功能逐渐强大。
</pre>
</div>
<div class=""col-lg-12 col-md-12 col-sm-12"">
    <pre>
简单的说，npm是进行后端开发中，使用的模块安装工具，而bower，是前端的模块安装工具。
比如，在安装express，socket.io时，当然使用的是npm，那么比如bootstrap，jquery等前端框架，需要使用bower

前端技术和工程实践真的是突飞猛进啊，想当年，我这个半业余前端吭哧吭哧做页面的时候，哪有这么多东西可以用啊，现在先进到我都完全看不懂了。本文主要讲一下同是包管理器的bower和npm的差别。
主要也是在stackoverflow看来的，翻译加一部分自己的理解。

npm 是伴随 Node.js 出现的一个包管理器，最开始只能支持 Node.js 的模块管理，但是后来， npm 官网经过一次改版，打出的口号是，javascript 的包管理器，所以，其已经不在局限于是
Node.js 的模块管理了，已经通用到了所有 js 的包管理工具了，可以说，前后通吃了。

bower 的话，从一开始，就是专门为前端表现设计的包管理器，一切全部为前端考虑的。npm 和 bower 的最大区别，就是 npm 支持嵌套地依赖管理，而 bower只能支持扁平的依赖（嵌套的依赖，由
程序员自己解决）。

嵌套依赖，指的就是，你依赖的软件包，还有它自己的依赖，好像摘葡萄，一摘一大串。在服务器环境的时候，这并没什么关系，因为存储空间够大，一切代码都是本地运行，只要解决完依赖就行了，
但是到了用户产品的浏览器里，就");
            WriteLiteral(@"很成问题了，你不能让用户去下载好几M的js代码，那就太糟糕了。在这个情况下，就需要程序员自己手动解决用到的类库的嵌套依赖问题。比如确保各种各样的插件
都依赖同一个版本的jQuery。

为什么有很多项目 bower 和 npm 都用呢，那是因为要用 bower 管理前端的包，而用 npm 去管理一些后端的包和构建工具，例如，yeoman，grunt，gulp，jshint 等等等等。

所有的包管理器，都有自己的弊端，要视需要选用对自己的项目最合适的。

重点来说说NPM和Twitter推出的名为 Bower 的包管理器之间到底有什么样的关系和区别呢？（Bower的官网写到，Bower 是 ""A package manager for the web"" ，难道说NPM就不是了嘛）。

其实，在实际项目中，NPM和Bower都会被运用进去。并且Bower的安装和升级全都依赖于NPM，使用如下命令就可以全局安装Bower

npm install -g bower
之后你就可以使用

bower install [#]
类似于NPM的方式，对于当前项目进行前端依赖的相关管理。使用起来和NPM一样方便快捷。

其中，与NPM最大的区别在于，NPM主要运用于Node.js项目的内部依赖包管理，安装的模块位于项目根目录下的node_modules文件夹内。而Bower大部分情况下用于前端开发，对于CSS/JS/模板等内容进行依赖管理，依赖的下载目录结构可以自定义。
</pre>
    <h6>参考资料 https://yq.aliyun.com/ziliao/40449 </h6> 
    <h6>npm bower 安装使用 https://blog.csdn.net/crystal6918/article/details/53705394 </h6>
</div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
